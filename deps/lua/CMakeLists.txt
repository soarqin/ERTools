# Copyright (C) 2007-2011 LuaDist.
# Created by Peter Draho≈°, Peter Kapec
# Redistribution and use of this file is allowed according to the terms of the MIT license.
# For details see the COPYRIGHT file distributed with LuaDist.
# Please note that the package source code is licensed under its own license.
# Changed by Vinicius Jarina (viniciusjarina@gmail.com)
cmake_minimum_required(VERSION 3.5)

PROJECT ( lua C )

IF (CMAKE_SIZEOF_VOID_P EQUAL 8)
  SET (LIB_SUFFIX "64" CACHE STRING "Suffix of the directory name, e.g. 64 for lib64")
ELSE (CMAKE_SIZEOF_VOID_P EQUAL 8)
  SET (LIB_SUFFIX "" CACHE STRING "Suffix of the directory name, e.g. 64 for lib64")
ENDIF (CMAKE_SIZEOF_VOID_P EQUAL 8)

SET (CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)

# $ORIGIN support in rpath.
IF (UNIX AND NOT APPLE)
  SET (USE_RPATH_ORIGIN TRUE)
  SET (CMAKE_INSTALL_RPATH "\$ORIGIN/../lib${LIB_SUFFIX}")
ENDIF ()

IF (APPLE)
  SET(SKIP_BUILD_RPATH, TRUE)
  SET(CMAKE_MACOSX_RPATH 1)
  ADD_DEFINITIONS (-DLUA_USE_MACOSX)
  LIST ( APPEND LIBS readline )
ENDIF ()

SET(CMAKE_DEBUG_POSTFIX "d")
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}" CACHE STRING "Library build output directory")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin${LIB_SUFFIX}")
SET(EXECUTABLE_OUTPUT_PATH         "${CMAKE_BINARY_DIR}/bin${LIB_SUFFIX}")

SET (LIB_LUA_VER "54" CACHE STRING "Suffix of version (for library name) e.g lua54")

#
# Include dir COPY
# If the source dir and the binary dir are not equals,
# copy the content of libzond/cinlude to $/include
# 
IF(NOT ${PROJECT_SOURCE_DIR} STREQUAL ${PROJECT_BINARY_DIR})
  SET(TEMP_INCLUDE_LUA_DIR_FROM "${PROJECT_SOURCE_DIR}/include")
  SET(TEMP_INCLUDE_LUA_DIR_TO   "${PROJECT_BINARY_DIR}")
  MESSAGE(STATUS "Copying include dirs from  ${TEMP_INCLUDE_LUA_DIR_FROM} to ${TEMP_INCLUDE_LUA_DIR_TO}")
  FILE ( COPY ${TEMP_INCLUDE_LUA_DIR_FROM} DESTINATION ${TEMP_INCLUDE_LUA_DIR_TO})
ENDIF()

OPTION(LUA_ENABLE_TESTS "Enable tests" ON)
OPTION(LUA_BUILD_CLI    "Build lua cli program" ON)
OPTION(LUA_BUILD_LUAC   "Build luac compiler" ON)

IF ( WIN32 AND NOT CYGWIN )
  # Windows systems
  OPTION ( LUA_WIN "Windows specific build." ON )
  OPTION ( LUA_BUILD_AS_DLL "Build  Lua library as Dll." ON )
  
ELSE ()
  # Posix systems (incl. Cygwin)
  OPTION ( LUA_USE_POSIX "Use POSIX functionality." ON )
  OPTION ( LUA_USE_DLOPEN "Use dynamic linker to load modules." ON )
  
ENDIF ()

IF ( LUA_USE_POSIX )
  # On POSIX Lua links to standard math library "m"
  LIST ( APPEND LIBS m )
  ADD_DEFINITIONS (-DLUA_USE_POSIX)
ENDIF ()

IF ( LUA_USE_DLOPEN )
  # Link to dynamic linker library "dl"
  LIST ( APPEND LIBS dl )
ENDIF ()

IF ( LUA_WIN )
  # Add extra rc files to the windows build
  IF ( MSVC OR MINGW )
    SET ( LUA_DLL_RC src/lua_dll.rc )
    SET ( LUA_RC src/lua.rc )
    SET ( LUAC_RC src/luac.rc )
  ENDIF ()
ENDIF ()


# Sources and headers
INCLUDE_DIRECTORIES ( include )
SET (   SRC_LIB 
    src/lapi.c
    src/lauxlib.c
    src/lbaselib.c
    src/lcode.c
    src/lcorolib.c
    src/lctype.c
    src/ldblib.c
    src/ldebug.c
    src/ldo.c
    src/ldump.c
    src/lfunc.c
    src/lgc.c
    src/linit.c
    src/liolib.c
    src/llex.c
    src/lmathlib.c
    src/lmem.c
    src/loadlib.c
    src/lobject.c
    src/lopcodes.c
    src/loslib.c
    src/lparser.c
    src/lstate.c
    src/lstring.c
    src/lstrlib.c
    src/ltable.c
    src/ltablib.c
    src/ltm.c
    src/lundump.c
    src/lutf8lib.c
    src/lvm.c
    src/lzio.c
    )

SET ( SRC_LUA  src/lua.c )
SET ( SRC_LUAC src/luac.c )

## BUILD
# Create dynamic library (dll, so)

if ( BUILD_SHARED_LIBS )
  ADD_LIBRARY ( liblua SHARED EXCLUDE_FROM_ALL ${SRC_LIB} ${LUA_DLL_RC})
  TARGET_INCLUDE_DIRECTORIES( liblua PUBLIC ${PROJECT_SOURCE_DIR}/include )
  TARGET_LINK_LIBRARIES ( liblua ${LIBS} )
  SET_TARGET_PROPERTIES ( liblua PROPERTIES OUTPUT_NAME lua${LIB_LUA_VER} CLEAN_DIRECT_OUTPUT 1 )

  if ( LUA_WIN )
    SET_TARGET_PROPERTIES ( liblua PROPERTIES COMPILE_FLAGS -DLUA_BUILD_AS_DLL)
  endif ( LUA_WIN )

  SET_TARGET_PROPERTIES(  liblua PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL ${PROJECT_BINARY_DIR}/lib${LIB_SUFFIX} )
  SET_TARGET_PROPERTIES(  liblua PROPERTIES LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${PROJECT_BINARY_DIR}/lib${LIB_SUFFIX} )
  SET_TARGET_PROPERTIES(  liblua PROPERTIES RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${PROJECT_BINARY_DIR}/bin${LIB_SUFFIX} )

  SET_TARGET_PROPERTIES(  liblua PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${PROJECT_BINARY_DIR}/lib${LIB_SUFFIX} )
  SET_TARGET_PROPERTIES(  liblua PROPERTIES LIBRARY_OUTPUT_DIRECTORY_RELEASE ${PROJECT_BINARY_DIR}/lib${LIB_SUFFIX} )
  SET_TARGET_PROPERTIES(  liblua PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ${PROJECT_BINARY_DIR}/bin${LIB_SUFFIX} )

  SET_TARGET_PROPERTIES(  liblua PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${PROJECT_BINARY_DIR}/lib${LIB_SUFFIX} )
  SET_TARGET_PROPERTIES(  liblua PROPERTIES LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${PROJECT_BINARY_DIR}/lib${LIB_SUFFIX} )
  SET_TARGET_PROPERTIES(  liblua PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${PROJECT_BINARY_DIR}/bin${LIB_SUFFIX} )

  SET_TARGET_PROPERTIES(  liblua PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${PROJECT_BINARY_DIR}/lib${LIB_SUFFIX} )
  SET_TARGET_PROPERTIES(  liblua PROPERTIES LIBRARY_OUTPUT_DIRECTORY_DEBUG ${PROJECT_BINARY_DIR}/lib${LIB_SUFFIX} )
  SET_TARGET_PROPERTIES(  liblua PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ${PROJECT_BINARY_DIR}/bin${LIB_SUFFIX} )
endif ( BUILD_SHARED_LIBS )

# Create static library, this is needed to compile luac in the 5.1.x, 5.2 Lua series

ADD_LIBRARY ( liblua_static STATIC EXCLUDE_FROM_ALL ${SRC_LIB} )
TARGET_INCLUDE_DIRECTORIES( liblua_static PUBLIC ${PROJECT_SOURCE_DIR}/include )
TARGET_LINK_LIBRARIES ( liblua_static ${LIBS} )

SET_TARGET_PROPERTIES ( liblua_static PROPERTIES OUTPUT_NAME lua${LIB_LUA_VER}_static CLEAN_DIRECT_OUTPUT 1 )

SET_TARGET_PROPERTIES(  liblua_static PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL ${PROJECT_BINARY_DIR}/lib${LIB_SUFFIX} )
SET_TARGET_PROPERTIES(  liblua_static PROPERTIES LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${PROJECT_BINARY_DIR}/lib${LIB_SUFFIX} )

SET_TARGET_PROPERTIES(  liblua_static PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${PROJECT_BINARY_DIR}/lib${LIB_SUFFIX} )
SET_TARGET_PROPERTIES(  liblua_static PROPERTIES LIBRARY_OUTPUT_DIRECTORY_RELEASE ${PROJECT_BINARY_DIR}/lib${LIB_SUFFIX} )

SET_TARGET_PROPERTIES(  liblua_static PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${PROJECT_BINARY_DIR}/lib${LIB_SUFFIX} )
SET_TARGET_PROPERTIES(  liblua_static PROPERTIES LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${PROJECT_BINARY_DIR}/lib${LIB_SUFFIX} )

SET_TARGET_PROPERTIES(  liblua_static PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${PROJECT_BINARY_DIR}/lib${LIB_SUFFIX} )
SET_TARGET_PROPERTIES(  liblua_static PROPERTIES LIBRARY_OUTPUT_DIRECTORY_DEBUG ${PROJECT_BINARY_DIR}/lib${LIB_SUFFIX} )

IF(LUA_BUILD_CLI)
  ADD_EXECUTABLE ( lua EXCLUDE_FROM_ALL ${SRC_LUA} ${LUA_RC})
  TARGET_LINK_LIBRARIES ( lua liblua_static ${LIBS})

  SET_TARGET_PROPERTIES ( lua PROPERTIES DEBUG_POSTFIX d)

  SET_TARGET_PROPERTIES ( lua PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG          ${PROJECT_BINARY_DIR}/bin${LIB_SUFFIX} )
  SET_TARGET_PROPERTIES ( lua PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${PROJECT_BINARY_DIR}/bin${LIB_SUFFIX} )
  SET_TARGET_PROPERTIES ( lua PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE        ${PROJECT_BINARY_DIR}/bin${LIB_SUFFIX} )
  SET_TARGET_PROPERTIES ( lua PROPERTIES RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL     ${PROJECT_BINARY_DIR}/bin${LIB_SUFFIX} )
ENDIF()

IF(LUA_BUILD_LUAC)
  ADD_EXECUTABLE ( luac EXCLUDE_FROM_ALL ${SRC_LUAC} ${LUAC_RC} )
  TARGET_LINK_LIBRARIES ( luac liblua_static )

  SET_TARGET_PROPERTIES ( luac PROPERTIES DEBUG_POSTFIX d)

  SET_TARGET_PROPERTIES ( luac PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG          ${PROJECT_BINARY_DIR}/bin${LIB_SUFFIX} )
  SET_TARGET_PROPERTIES ( luac PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${PROJECT_BINARY_DIR}/bin${LIB_SUFFIX} )
  SET_TARGET_PROPERTIES ( luac PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE        ${PROJECT_BINARY_DIR}/bin${LIB_SUFFIX} )
  SET_TARGET_PROPERTIES ( luac PROPERTIES RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL     ${PROJECT_BINARY_DIR}/bin${LIB_SUFFIX} )
ENDIF()

IF(LUA_ENABLE_TESTS)
  ENABLE_TESTING()

  SET(TEST_PARAM -e _U=true)

  ADD_TEST(NAME test_all 
           WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/test 
           COMMAND lua ${TEST_PARAM} ${PROJECT_SOURCE_DIR}/test/all.lua)
ENDIF()

ADD_SUBDIRECTORY(packages)
IF(LUA_BUILD_CLI AND TARGET lua_extra_pkgs)
  TARGET_LINK_LIBRARIES(lua lua_extra_pkgs)
ENDIF()
